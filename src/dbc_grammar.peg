# DBC Grammar
grammar   <- version symbols bs ecus ecus_sl val_table message* vals EndOfFile

version   <- 'VERSION' s* phrase s* _
symbols   <- ('NS_' s* ':' s* NewLine (symbol_name)* _)?
symbol_name <- ('    '/'  ') TOKEN
bs        <- ('BS_' s* ':' s* NewLine symbol_name* _)?
ecus      <- ('BU_' s* ':' s* NewLine (symbol_name)* _)?
ecus_sl   <- ('BU_' s* ':' s* TOKEN (s* TOKEN)* _)?
val_table <- val_entry* _ 
val_entry <- 'VAL_TABLE_' s* TOKEN s (number_phrase_pair)* ';' NewLine
number_phrase_pair <- number s phrase s

message   <- 'BO_' s* number s* TOKEN ':' s number s TOKEN _ signal* (TrailingSpace / _ )
signal <- s* 'SG_' s* TOKEN s* ':' s* number '|' number '@' number sign s* '(' number ',' number ')' s* '[' number '|' number ']' s* phrase s* TOKEN _

vals   <- ('VAL_' s* number s* TOKEN s* number s* phrase (s* number s* phrase)* s* ';' _)*

phrase    <- < '"' (!'"' .)* '"' >
sign      <- < [-+] > _
TOKEN     <- < [a-zA-Z0-9'_']+ > _
number    <- float / integer 
integer   <- < sign? [0-9]+ > _
float     <- < sign? [0-9]+'.'[0-9]+ > _

EndOfFile <- !.

s         <- [ \t]
NewLine   <- [\r\n]

TrailingSpace  <- ' '* _

~_     <- [\t\r\n]*
~__    <- ![a-zA-Z0-9]

